import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const API_URL = "http://localhost:8989/api"; // üîπ adapte selon ton backend

// ===============================
// üîπ 1Ô∏è‚É£ SERVICES (fonctions backend)
// ===============================

// Signup √©l√®ve
export const signupEleve = async (eleveData) => {
  const res = await axios.post(`${API_URL}/eleves/signup`, eleveData);

  if (res.data.success) {
    localStorage.setItem("token", res.data.token);
    localStorage.setItem("email", res.data.eleve.email);
    localStorage.setItem("profId", res.data.eleve.profId || "");
    localStorage.setItem("classeId", res.data.eleve.classeId || "");
    localStorage.setItem("eleveId", res.data.eleve._id); // ‚úÖ correct
  }

  return res;
};

// Login √©l√®ve
export const loginEleve = async (credentials) => {
  const res = await axios.post(`${API_URL}/eleves/login`, credentials);

  if (res.data.success) {
    localStorage.setItem("token", res.data.token);
    localStorage.setItem("email", res.data.eleve.email);
    localStorage.setItem("profId", res.data.eleve.profId || "");
    localStorage.setItem("classeId", res.data.eleve.classeId || "");
    localStorage.setItem("eleveId", res.data.eleve._id); // ‚úÖ correct
  }

  return res;
};

// ===============================
// üîπ 2Ô∏è‚É£ COMPOSANT INSCRIPTION √âL√àVE
// ===============================
export const SignupEleve = () => {
  const [nom, setNom] = useState("");
  const [prenom, setPrenom] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const profId = localStorage.getItem("profId") || ""; // le prof s√©lectionn√©
    const eleveData = { nom, prenom, email, password, profId };

    console.log("üì¶ Donn√©es envoy√©es au backend :", eleveData);

    try {
      const res = await signupEleve(eleveData);

      if (res.data.success) {
        setMessage("Compte cr√©√© avec succ√®s !");
        navigate("/login-eleve");
      } else {
        setMessage(res.data.message || "Erreur lors de l'inscription");
      }
    } catch (err) {
      console.error("Erreur signup √©l√®ve:", err);
      setMessage("Erreur lors de l'inscription");
    }
  };

  return (
    <div className="signup">
      <form className="formulaire" onSubmit={handleSubmit}>
      <h2>Inscription √âl√®ve</h2>
        <input
          className="input"
          type="text"
          placeholder="Nom de l'√©l√®ve"
          value={nom}
          onChange={(e) => setNom(e.target.value)}
          required
        />
          <input
          className="input"
          type="text"
          placeholder="Pr√©nom de l'√®l√©ve"
          value={prenom}
          onChange={(e) => setPrenom(e.target.value)}
          required
        />
        <input
          className="input"
          type="email"
          placeholder="Email de l'√©l√®ve"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          className="input"
          type="password"
          placeholder="Votre mot de passe"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
       
        <button className="button" type="submit"><strong>S'inscrire √† SEV </strong></button>
        <br/>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

// ===============================
// üîπ 3Ô∏è‚É£ COMPOSANT CONNEXION √âL√àVE
// ===============================
export const LoginEleve = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      const res = await loginEleve({ email, password });

      if (res.data.success) {
        setMessage("Connexion r√©ussie !");
          // Attendre la fin de la mise √† jour du localStorage
  localStorage.setItem("eleveId", res.data.eleve._id);
        navigate("/espace-eleve"); // redirige vers la page de l‚Äô√©l√®ve
      } else {
        setMessage(res.data.message || "Identifiants invalides");
      }
    } catch (err) {
      console.error("Erreur login √©l√®ve:", err);
      setMessage("Erreur lors de la connexion");
    }
  };
  return (
    <div className="signup">
      <form className="formulaire" onSubmit={handleLogin}>
      <h2>Connexion √âl√®ve</h2>
        <input
          className="input"
          type="text"
          id="email"
          placeholder="Entrer votre Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          className="input"
          type="password"
          id="password"
          placeholder="Entrer votre mot de passe"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button className="button" type="submit" id="button">Se connecter</button>
        <br/>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};
